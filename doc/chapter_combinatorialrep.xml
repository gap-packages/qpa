<Chapter Label="Combinatorial_Rep_Theory">
<Heading>Combinatorial representation theory</Heading>

<Section>
<Heading>Introduction</Heading> 

Here we introduce the implementation of the software package CREP
initially designed for MAPLE.
</Section>

<Section Label="UnitForms">
<Heading>Different unit forms</Heading>

<ManSection>
<Filt Type="Category" Name="IsUnitForm"/>
<Description>
The category for unit forms, which we identify with symmetric integral
matrices with 2 along the diagonal.
</Description>
</ManSection>

<ManSection>
  <Attr Name="BilinearFormOfUnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- a unit form.<Br />
  </Description>
  <Returns>
    the bilinear form associated to a unit form <Arg>B</Arg>. 
  </Returns>
  <Description>The bilinear form associated to the unitform
  <Arg>B</Arg> given by a matrix <C>B</C> is defined for two vectors
  <C>x</C> and <C>y</C> as: <M>x*B*y^T</M>.
  </Description>
</ManSection>

<ManSection>
  <Prop Name="IsWeaklyNonnegativeUnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- a unit form.<Br />
  </Description>
  <Returns>
    true is the unitform <Arg>B</Arg> is weakly non-negative, otherwise false. 
  </Returns>
  <Description>The unit form <Arg>B</Arg> is weakly non-negative is
  <M>B(x,y) \geq 0</M> for all <M>x\neq 0</M> in <M>\mathbb{Z}^n</M>, where
  <M>n</M> is the dimension of the square matrix associated to
  <Arg>B</Arg>.
  </Description>
</ManSection>

<ManSection>
  <Prop Name="IsWeaklyPositiveUnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- a unit form.<Br />
  </Description>
  <Returns>
    true is the unitform <Arg>B</Arg> is weakly positive, otherwise false. 
  </Returns>
  <Description>The unit form <Arg>B</Arg> is weakly positive if
  <M>B(x,y) > 0</M> for all <M>x\neq 0</M> in <M>\mathbb{Z}^n</M>,
  where <M>n</M> is the dimension of the square matrix associated to
  <Arg>B</Arg>.
  </Description>
</ManSection>

<ManSection>
  <Attr Name="PositiveRootsOfUnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- a unit form.<Br />
  </Description>
  <Returns>
    the positive roots of a unit form, if the unit form is weakly
    positive. If they have not been computed, an error message will be
    returned saying "no method found!". 
  </Returns>
  <Description>
    This attribute will be attached to <Arg>B</Arg> when
    <C>IsWeaklyPositiveUnitForm</C> is applied to <Arg>B</Arg> and it
    is weakly positive.
  </Description>
</ManSection>


<ManSection>
  <Attr Name="QuadraticFormOfUnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- a unit form.<Br />
  </Description>
  <Returns>
    the quadratic form associated to a unit form <Arg>B</Arg>. 
  </Returns>
  <Description>The quadratic form associated to the unitform
  <Arg>B</Arg> given by a matrix <C>B</C> is defined for a vector
  <C>x</C> as: <M>\frac{1}{2}x*B*x^T</M>.
  </Description>
</ManSection>

<ManSection>
  <Attr Name="SymmetricMatrixOfUnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- a unit form.<Br />
  </Description>
  <Returns>
    the symmetric integral matrix which defines the unit form <Arg>B</Arg>. 
  </Returns>
</ManSection>

<ManSection>
  <Oper Name="TitsUnitFormOfAlgebra" Arg="A" />
  <Description>
    Arguments: <Arg>A</Arg> -- a finite dimensional (quotient of a)
    path algebra (by an admissible ideal).<Br />
  </Description>
  <Returns>
    the Tits unit form associated to the algebra <Arg>A</Arg>.
  </Returns>
  <Description>This function returns the Tits unitform associated to a
  finite dimensional quotient of a path algebra by an admissible ideal
  or path algebra, given that the underlying quiver has no loops or
  minimal relations that starts and ends in the same vertex. That is,
  then it returns a symmetric matrix <M>B</M> such that for <M>x =
  (x_1,...,x_n) (1/2)*(x_1,...,x_n)B(x_1,...,x_n)^T = \sum_{i=1}^n
  x_i^2 - \sum_{i,j} \dim_k \Ext^1(S_i,S_j)x_ix_j + \sum_{i,j} \dim_k
  \Ext^2(S_i,S_j)x_ix_j</M>, where <M>n</M> is the number of vertices
  in <M>Q</M>.
  </Description>
</ManSection>

<ManSection>
  <Oper Name="EulerBilinearFormOfAlgebra" Arg="A" />
  <Description>
    Arguments: <Arg>A</Arg> -- a finite dimensional (quotient of a)
    path algebra (by an admissible ideal).<Br />
  </Description>
  <Returns>
    the Euler (non-symmetric) bilinear form associated to the algebra <Arg>A</Arg>.
  </Returns>
  <Description>This function returns the Euler (non-symmetric) bilinear form 
  associated to a finite dimensional (basic) quotient of a path algebra <Arg>A</Arg>.
  That is,  it returns a bilinear form (function) defined by<Br />
  <M>f(x,y) = x*\textrm{CartanMatrix}(A)^{(-1)}*y</M><Br />
  It makes sense only in case <Arg>A</Arg> is of finite global dimension.
  </Description>
</ManSection>


<ManSection>
  <Oper Name="UnitForm" Arg="B" />
  <Description>
    Arguments: <Arg>B</Arg> -- an integral matrix.<Br />
  </Description>
  <Returns>
    the unit form in the category <Ref Filt="IsUnitForm"/> associated
    to the matrix <Arg>B</Arg>.
  </Returns>
  <Description>The function checks if <Arg>B</Arg> is a symmetric
  integral matrix with 2 along the diagonal, and returns an error
  message otherwise. In addition it sets the attributes, <Ref
  Attr="BilinearFormOfUnitForm"/>, <Ref
  Attr="QuadraticFormOfUnitForm"/> and <Ref
  Attr="SymmetricMatrixOfUnitForm"/>.
  </Description>
</ManSection>


</Section>

<Section Label="Combinatorial Maps">
<Heading>Combinatorial Maps</Heading>

<ManSection>
   <Filt Name="IsCombinatorialMap" Arg="" Comm=""/>
   <Description>
     This defines the category
     <Ref Filt="IsCombinatorialMap"/>. 
   </Description>
</ManSection> 


<ManSection>

<Oper Name="CombinatorialMap" Label="combinatorialmap" Arg="n, sigma, iota, m" />

<Description> Arguments : <Arg>n</Arg> -- number of half-edges, <Arg>sigma</Arg> -- a permutation specifying the ordering of half-edges around vertices, <Arg>iota</Arg> -- an involution pairing the half-edges, <Arg>m</Arg> -- a list of marked half-edges
</Description>

<Returns> a combinatorial map, which is an object from the category
<Ref Filt="IsCombinatorialMap"/>.</Returns>

<Description>
    The size of the underlying set given by <Arg>size</Arg> is given a positive integer, the ordering and the pairing are given by two permutations <Arg>ordering</Arg> and <Arg>paring</Arg> of a set of <Arg>size</Arg> elements ({1, 2,..., <Arg>size</Arg>}) and the marked half-edges are given as a list of integers in {1, 2,..., <Arg>size</Arg>}.
</Description>

</ManSection>

<ManSection>

<Attr Name="FacesOfCombinatorialMap" Label="map" Arg="map" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map.
</Description>

<Returns> the list of faces of the combinatorial map <Arg>map</Arg>. </Returns>
    
<Description>
    The faces are given by a list of half-edges of <Arg>map</Arg>.
</Description>

</ManSection>

<ManSection>

<Attr Name="GenusOfCombinatorialMap" Label="map" Arg="map" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map.
</Description>

<Returns> the genus of the surface represented by the combinatorial map <Arg>map</Arg>.</Returns>
    
</ManSection>
    
<ManSection>

<Attr Name="DualOfCombinatorialMap" Label="map" Arg="map" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map.
</Description>

<Returns> the dual combinatorial map of <Arg>map</Arg>. </Returns>

</ManSection>

<ManSection>

<Attr Name="MaximalPathsOfGentleAlgebra" Label="algebra" Arg="A" />

<Description> Argument : <Arg>A</Arg> -- a gentle algebra.
</Description>

<Returns> the list of maximal paths of the quiver with relations defining <Arg>A</Arg>. </Returns>
    
<Description>
    Only returns paths of non-zero length.
</Description>

</ManSection>
    
<ManSection>
    
<Oper Name="RemoveEdgeOfCombinatorialMap" Label="map, edge" Arg="combmap,E" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map, <Arg>edge</Arg> -- a list of two paired half-edges.
</Description>

<Returns> the combinatorial map obtained by removing <Arg>edge</Arg>
from the combinatorial map <Arg>map</Arg>. </Returns>

    
<Description>
    The argument <Arg>edge</Arg> has to be a list consisting of two half-edges of <Arg>map</Arg> that are paired. The returned combinatorial map does not change size, the two removed half-edges are now fixed by the pairing and ordering so do not appear in non-trivial orbits.
</Description>

</ManSection>

<ManSection>

<Attr Name="CombinatorialMapOfGentleAlgebra" Label="algebra" Arg="A" />

<Description> Argument : <Arg>A</Arg> -- a gentle algebra.
</Description>

<Returns> the combinatorial map corresponding to the Brauer Graph of
the trivial extension of <Arg>algebra</Arg> with regard to its dual. </Returns>


<Description> The function assumes that <Arg>algebra</Arg> is gentle.
</Description>

</ManSection>

<ManSection>

<Attr Name="MarkedBoundariesOfCombinatorialMap" Label="map" Arg="map" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map.
</Description>

<Returns> a list consisting of pairs [Face,numberofmarkedpoints] where
Face is a face of the combinatorial map <Arg>map</Arg> and
numberofmarkedpoints is the number of marked half-edges on the
corresponding boundary component. </Returns>

    
</ManSection>
    
<ManSection>

<Oper Name="WindingNumber" Label="map, curve" Arg="map,gamma" />
    
<Description> Argument : <Arg>map</Arg> -- a combinatorial map, <Arg>gamma</Arg> -- a list of half-edges forming a closed curve on the surface.
</Description>
    
<Returns> the combinatorial winding number of <Arg>gamma</Arg> on the
dissected surface given by <Arg>map</Arg>. </Returns>


</ManSection>
    
<ManSection>

<Attr Name="BoundaryCurvesOfCombinatorialMap" Label="map" Arg="map" />


<Description> Argument : <Arg>map</Arg> -- a combinatorial map.
</Description>

<Returns> a list whose elements are lists of half-edges of the
combinatorial map <Arg>map</Arg>. Each of these lists corresponds to a closed
curve homotopic to a boundary component of the surface represented by
<Arg>map</Arg>. </Returns>


<Description> The closed curves are represented by a list of adjacent half-edges. The orientation of these curves is chosen so that the corresponding boundary component is to the right. The returned curves correspond to the curves in minimal position in regards to the dual dissection of the surface. In the case of the disk, the boundary curve is trivial and the empty list is returned.
</Description>

</ManSection>


<ManSection>

<Oper Name="DepthSearchCombinatorialMap" Label="map, halfedge" Arg="combmap,x" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map, <Arg>x</Arg> -- a half-edge of <Arg>map</Arg>
</Description>

<Returns> a list of pairs of paired half-edges of the combinatorial
map <Arg>map</Arg> corresponding to the cover tree of the underlying
graph of <Arg>map</Arg> obtained by a depth first search with root the
vertex to which is attached <Arg>x</Arg>. </Returns>



<Description> The paired half-edges of the cover tree are oriented towards the root of the cover tree.
</Description>

</ManSection>

<ManSection>

<Oper Name="WidthSearchCombinatorialMap" Label="map, halfedge" Arg="combmap,x" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map, <Arg>x</Arg> -- a half-edge of <Arg>map</Arg>
</Description>

<Returns> a list of pairs of paired half-edges of the combinatorial
map <Arg>map</Arg> corresponding to the cover tree of the underlying
graph of <Arg>map</Arg> obtained by a width first search with root the
vertex to which is attached <Arg>x</Arg>. </Returns>

<Description> The paired half-edges of the cover tree are oriented towards the root of the cover tree.
</Description>

</ManSection>

<ManSection>

<Attr Name="NonSeperatingCurve" Label="map" Arg="map" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map.
</Description>

<Returns> a list of half-edges of the combinatorial map <Arg>map</Arg>
corresponding to a non-seperating closed curve of the surface. </Returns>


<Description> This function must be used on a combinatorial map of genus at least one.
</Description>

</ManSection>

<ManSection>

<Oper Name="CutNonSepCombinatorialMap" Label="map, curve, index" Arg="map, alpha, index" />

<Description> Arguments : <Arg>map</Arg> -- a combinatorial map, <Arg>alpha</Arg> -- a list of half-edges, <Arg>index</Arg> -- a list.
</Description>

<Returns> a triplet [newmap, [boundary1,boundary2], newindex] where
newmap is the combinatorial map obtained by cutting the surface
represented by <Arg>map</Arg> along the closed curve
<Arg>curve</Arg>. The lists boundary1 and boundary2 are the boundaries
of newmap that were created by the cut. </Returns>


<Description> The argument <Arg>index</Arg> is a list whose i-th
element is the half-edge to which i corresponds in some original
combinatorial map. The result newindex is the updated index for newmap
where all created half-edges are added.
</Description>

</ManSection>

<ManSection>

<Oper Name="JoinCurveCombinatorialMap" Label="map, boundary1, boundary2, index" Arg="map, bound1, bound2, index" />

<Description> Arguments : <Arg>map</Arg> -- a combinatorial map, <Arg>boundary1</Arg> -- a list of half-edges, <Arg>boundary2</Arg> -- a list of half-edges, <Arg>index</Arg> -- a list.
</Description>

<Returns> a list corresponding to a simple curve of <Arg>map</Arg>
joining the two boundaries <Arg>boundary1</Arg> and
<Arg>boundary2</Arg> in such a way that using <Arg>index</Arg> it
corresponds to a closed curve on the original combinatorial
map. </Returns>

<Description> The list consists of adjacent half-edges of <Arg>map</Arg> which form the closed curve.
</Description>

</ManSection>

<ManSection>

<Oper Name="CutJoinCurveCombinatorialMap" Label="map, boundary1, boundary2, curve, index" Arg="map, bound1, bound2, beta, index" />


<Description> Arguments : <Arg>map</Arg> -- a combinatorial map, <Arg>boundary1</Arg> -- a list of half-edges, <Arg>boundary2</Arg> -- a list of half-edges, <Arg>beta</Arg> -- a list of half-edges corresponding to a curve, <Arg>index</Arg> -- a list.
</Description>

<Returns> the pair [newmap, newindex] where newmap is the
combinatorial map obtained by cutting the combinatorial map
<Arg>map</Arg> along <Arg>curve</Arg> which has to be a simple curve
joining <Arg>boundary1</Arg> and <Arg>boundary2</Arg></Returns>
    
</ManSection>


<ManSection>
    
<Attr Name="HomologyBasisOfCombinatorialMap" Label="map" Arg="map" />

<Description> Argument : <Arg>map</Arg> -- a combinatorial map. </Description>

<Returns> a list of pairs [a_i,b_i] where a_i and b_i are lists of
half-edges of the combinatorial map <Arg>map</Arg> forming a closed
curve such that the a_i and b_i form a simplectic basis of the first
homology group of the surface represented by <Arg>map</Arg> for the
intersection form. </Returns>


</ManSection>

    
<ManSection>
    
<Oper Name="AreDerivedEquivalent" Label="A,B" Arg="A,B" />

<Description> Arguments : <Arg>A</Arg> -- a gentle algebra, <Arg>B</Arg> -- a gentle algebra. </Description>

<Returns> true if <Arg>A</Arg> and <Arg>B</Arg> are derived equivalent
and false otherwise. The arguments must be gentle algebras over the
same field. </Returns>


</ManSection>




</Section>
</Chapter>
